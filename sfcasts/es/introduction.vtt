WEBVTT

00:00:00.096 --> 00:00:03.606 align:middle
¡Hola, amigos!

00:00:04.006 --> 00:00:08.246 align:middle
Bienvenidos a un nuevo curso sobre
Atributos de Inyección de Dependencia.

00:00:08.526 --> 00:00:10.786 align:middle
¿Qué son los Atributos de
Inyección de Dependencia?

00:00:11.286 --> 00:00:16.896 align:middle
Bueno, aquí tienes una pequeña lección de historia: Hace
mucho tiempo, en una versión de Symfony muy, muy lejana,

00:00:17.196 --> 00:00:23.176 align:middle
los servicios (que son objetos que funcionan) tenían
que configurarse en archivos YAML o XML independientes.

00:00:23.456 --> 00:00:26.046 align:middle
Los chicos guays lo llamaban
"cablear un servicio".

00:00:26.586 --> 00:00:30.556 align:middle
En estos archivos, creábamos un ID de servicio,
hacíamos referencia a nuestra clase de servicio

00:00:30.896 --> 00:00:35.896 align:middle
y, a continuación, hacíamos referencia a cualquier ID de
servicio, parámetro o valor escalar que fuera necesario.

00:00:36.516 --> 00:00:38.886 align:middle
Aunque esto funcionaba muy
bien, era un poco engorroso.

00:00:39.286 --> 00:00:43.366 align:middle
Cada vez que necesitábamos añadir, eliminar
o modificar los argumentos de un servicio,

00:00:43.626 --> 00:00:47.426 align:middle
teníamos que saltar a otro archivo de
configuración y actualizarlo también.

00:00:47.936 --> 00:00:50.236 align:middle
Seguro que podríamos encontrar una
forma mejor de hacerlo, ¿verdad?

00:00:50.666 --> 00:00:54.766 align:middle
¡Seguro que sí! En una versión posterior
de Symfony, hace todavía mucho tiempo,

00:00:55.036 --> 00:00:56.936 align:middle
añadieron algo llamado "autocableado".

00:00:57.486 --> 00:01:00.516 align:middle
Esto nos permitía simplemente
crear un objeto de servicio PHP,

00:01:00.686 --> 00:01:04.386 align:middle
y cualquier otro servicio necesario
se inyectaría automáticamente.

00:01:04.746 --> 00:01:07.626 align:middle
Sólo teníamos que teclear la
clase o interfaz del servicio.

00:01:08.156 --> 00:01:12.736 align:middle
Aunque esto supuso un gran avance, aún
teníamos que configurarlo en YAML o XML,

00:01:12.766 --> 00:01:18.006 align:middle
incluso en escenarios ligeramente más avanzados
(como argumentos escalares de un parámetro).

00:01:18.676 --> 00:01:20.746 align:middle
Definitivamente redujo la
cantidad de tiempo invertido

00:01:20.746 --> 00:01:23.406 align:middle
en archivos de configuración,
pero no lo eliminó.

00:01:24.086 --> 00:01:28.926 align:middle
Entonces llegó PHP 8 y añadió atributos
nativos, metadatos que pueden añadirse

00:01:28.926 --> 00:01:32.206 align:middle
a propiedades de clases, métodos,
argumentos de métodos y más.

00:01:32.736 --> 00:01:35.316 align:middle
Esta era la característica perfecta
para permitirnos hacer toda la

00:01:35.316 --> 00:01:38.086 align:middle
configuración directamente en
nuestras clases de servicio.

00:01:38.116 --> 00:01:43.776 align:middle
Con Symfony 7.1 - la versión que usaremos en
este curso - hay una plétora de atributos DI

00:01:43.776 --> 00:01:45.826 align:middle
que usar, y echaremos un
vistazo a cada uno de ellos.

00:01:46.426 --> 00:01:50.306 align:middle
Veremos que la edición de un archivo de
configuración independiente sólo es necesaria

00:01:50.306 --> 00:01:52.606 align:middle
en escenarios raros y superavanzados.

00:01:53.026 --> 00:01:57.966 align:middle
En la mayoría de los casos, el archivo services.yaml,
que se incluye en cada nueva aplicación Symfony,

00:01:58.196 --> 00:02:01.006 align:middle
es todo lo que necesitaremos,
y casi nunca cambiará.

00:02:01.386 --> 00:02:05.346 align:middle
Mostraremos todos estos atributos en una pequeña y
divertida aplicación para que puedas ver cómo funcionan.

00:02:06.066 --> 00:02:09.966 align:middle
Este es el escenario: Tenemos un televisor
inteligente, pero hemos perdido el mando a distancia.

00:02:10.336 --> 00:02:13.226 align:middle
Lo hemos buscado por todas
partes, pero no lo encontramos.

00:02:13.526 --> 00:02:17.026 align:middle
Seguro que esos molestos gnomos del mando se
lo llevaron para venderlo en "Gnomeslist"...

00:02:17.656 --> 00:02:22.126 align:middle
Hemos encontrado un mando de repuesto en Internet, pero está
pendiente de entrega y tardará una eternidad en llegar.

00:02:22.666 --> 00:02:23.386 align:middle
¿Qué hacemos?

00:02:23.966 --> 00:02:27.726 align:middle
Bueno, mientras buscábamos una
solución en "RemoteOverflow.com",

00:02:27.966 --> 00:02:33.126 align:middle
un usuario (que definitivamente no es un gnomo) nos
habló de una API que existe para nuestra smart TV.

00:02:33.746 --> 00:02:38.276 align:middle
Como desarrolladores web, podemos utilizar esa API para
crear nuestro propio mando a distancia al que podamos acceder

00:02:38.276 --> 00:02:41.356 align:middle
y utilizar en cualquier tableta
conectada a nuestra red doméstica.

00:02:41.806 --> 00:02:44.286 align:middle
Menos mal que los gnomos no nos
robaron la tableta, ¿verdad?

00:02:44.836 --> 00:02:50.516 align:middle
¿Verdad? Para codificar conmigo, descarga el código
del curso de este vídeo, ábrelo en el IDE que

00:02:50.516 --> 00:02:54.666 align:middle
prefieras y sigue los pasos de
configuración del archivo README.md.

00:02:55.236 --> 00:02:56.086 align:middle
Yo ya lo he hecho.

00:02:56.606 --> 00:03:00.486 align:middle
Ahora podemos ir a nuestro terminal
y ejecutar symfony serve -d

00:03:00.806 --> 00:03:02.306 align:middle
para ejecutar el servidor en segundo plano.

00:03:03.056 --> 00:03:07.486 align:middle
Mantén pulsado "comando" y haz clic en la URL de aquí
para abrir nuestra aplicación en el navegador, y...

00:03:07.776 --> 00:03:08.556 align:middle
¡ahí está nuestro remoto!

00:03:09.116 --> 00:03:13.476 align:middle
Hace todas las cosas habituales de un mando a distancia,
como cambiar de canal, encender y apagar el televisor

00:03:13.476 --> 00:03:15.766 align:middle
y subir o bajar el volumen.

00:03:16.236 --> 00:03:17.396 align:middle
Eso es todo por ahora.

00:03:17.966 --> 00:03:22.316 align:middle
Si pasamos al código, es una aplicación
Symfony 7.1 casi lista para usar.

00:03:22.796 --> 00:03:27.096 align:middle
Tenemos un único controlador -
RemoteController - y una única ruta - home.

00:03:27.746 --> 00:03:30.866 align:middle
Este controlador se encarga de mostrar la
interfaz de usuario y de los clics en los botones.

00:03:31.316 --> 00:03:34.806 align:middle
Cuando se pulsa un botón, gestionamos la
lógica de los distintos botones (representada

00:03:34.806 --> 00:03:38.926 align:middle
por un dump()), añadimos el mensaje
flash y redirigimos a la misma ruta.

00:03:38.926 --> 00:03:43.606 align:middle
Si no maneja un clic de botón,
renderiza este index.html.twig.

00:03:43.896 --> 00:03:45.156 align:middle
Esa es nuestra plantilla remota.

00:03:45.746 --> 00:03:49.966 align:middle
En nuestro directorio templates/, echemos
un vistazo rápido a base.html.twig.

00:03:50.436 --> 00:03:52.406 align:middle
Proviene de una instalación
estándar de Symfony.

00:03:52.786 --> 00:03:55.466 align:middle
La interfaz de usuario está
diseñada con CSS de Tailwind,

00:03:55.746 --> 00:03:58.286 align:middle
pero estoy haciendo algo un poco
diferente a lo que estás acostumbrado.

00:03:58.876 --> 00:04:03.576 align:middle
En lugar de instalar un sistema de gestión de
activos como AssetMapper o Webpack Encore, utilizo

00:04:03.926 --> 00:04:07.876 align:middle
la CDN de CSS de Tailwind
para simplificar las cosas.

00:04:08.546 --> 00:04:11.906 align:middle
Esto inyecta un poco de JavaScript
en tu página que lee todas las

00:04:11.906 --> 00:04:14.466 align:middle
clases de Tailwind que
estás utilizando en tu HTML.

00:04:15.036 --> 00:04:19.236 align:middle
Luego construye un archivo CSS personalizado
y lo inyecta, estilizando el HTML.

00:04:19.826 --> 00:04:23.726 align:middle
Como puedes imaginar, esto es un poco lento
y nunca debería utilizarse en producción.

00:04:24.396 --> 00:04:29.146 align:middle
Para la creación de prototipos y nuestros propósitos,
es bastante fácil de poner en marcha y funciona muy bien.

00:04:29.146 --> 00:04:34.176 align:middle
Ahora, si echamos un vistazo a index.html.twig,
ésta es nuestra plantilla remota real.

00:04:34.706 --> 00:04:38.076 align:middle
Es bastante estándar, y puedes ver las
clases Tailwind que estamos utilizando.

00:04:38.076 --> 00:04:43.686 align:middle
Aquí es donde estamos renderizando nuestro mensaje
flash, si existe, y aquí están los botones reales.

00:04:44.226 --> 00:04:47.436 align:middle
Están envueltos en un <form> donde
cada <button> envía el formulario

00:04:47.736 --> 00:04:49.306 align:middle
con el nombre del botón
en el que se ha hecho clic.

00:04:49.956 --> 00:04:54.086 align:middle
Lo único que es un poco atípico es
esta etiqueta <twig:ux:icon ...>

00:04:54.086 --> 00:04:57.676 align:middle
. Se trata de una combinación
de dos paquetes de terceros que

00:04:57.896 --> 00:05:00.466 align:middle
forman parte de la Iniciativa
Symfony UX. En primer lugar,

00:05:01.096 --> 00:05:03.946 align:middle
estamos utilizando symfony/ux-icons. Este

00:05:04.336 --> 00:05:09.226 align:middle
paquete te permite añadir archivos .svg
a este directorio assets/icons. Ahora,

00:05:09.736 --> 00:05:14.296 align:middle
puedes incrustar estos SVG en Twig utilizando
el nombre del archivo (menos el .svg) como

00:05:14.556 --> 00:05:16.366 align:middle
atributo name en esta etiqueta.

00:05:17.146 --> 00:05:21.506 align:middle
También puedes añadir atributos adicionales como
los que tenemos aquí: height, width, class, etc.

00:05:21.506 --> 00:05:25.196 align:middle
Éstos se añadirán al elemento
<svg> incrustado. Este

00:05:25.786 --> 00:05:27.916 align:middle
paquete también hace otras
cosas increíbles, ¡así

00:05:27.916 --> 00:05:30.796 align:middle
que busca en Google "Symfony UX
Icons" para saber más sobre él!

00:05:31.516 --> 00:05:33.606 align:middle
La otra parte de esta etiqueta
<twig:ux:icons ...>

00:05:33.606 --> 00:05:35.066 align:middle
es la propia etiqueta.

00:05:35.676 --> 00:05:38.886 align:middle
Proviene del paquete symfony/ux-twig-component.

00:05:39.366 --> 00:05:43.156 align:middle
En esencia, es una etiqueta Twig {{
include() }} más avanzada, que te

00:05:43.546 --> 00:05:47.446 align:middle
permite pasar atributos HTML como class a
los componentes. Una característica opcional

00:05:48.176 --> 00:05:51.356 align:middle
que proporciona es esta
sintaxis HTML. Si estás

00:05:51.756 --> 00:05:54.916 align:middle
familiarizado con los componentes de
frameworks frontales como Vue.js, ésta es

00:05:54.916 --> 00:05:57.726 align:middle
básicamente la versión Twig. El paquete UX

00:05:57.726 --> 00:06:04.486 align:middle
Icon se conecta a Twig Components y nos
proporciona un práctico componente UX:Icon

00:06:04.746 --> 00:06:07.456 align:middle
que podemos representar con
<twig:ux:icon.... Eso puede

00:06:08.096 --> 00:06:10.476 align:middle
hacer que nuestra plantilla sea
más fácil de leer. Para saber

00:06:11.006 --> 00:06:15.246 align:middle
más sobre los componentes Twig y todas las
cosas interesantes que pueden hacer, busca

00:06:15.246 --> 00:06:20.796 align:middle
"Componentes Twig de Symfony" y consulta
la documentación A continuación:

00:06:21.276 --> 00:06:26.526 align:middle
Empecemos a refactorizar nuestra aplicación para
utilizar atributos de inyección de dependencia.
